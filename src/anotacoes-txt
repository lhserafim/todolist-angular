Anotações:
1. O ponto de entrada do Angular é o arquivo index.html, é neste arquivo que o "sistema" sai apontando para os outros HTML's e seus componentes
2. No arquivo index.html, temos o apontamento para a tag <app-root> e é por este path que o sistema entra dentro do diretório components
3. Dentro de components, eu posso criar quantos components eu quiser e associar um aos outros através do uso das tags que são criadas para cada 
um deles. Exemplo: <app-todo>, <app-todo-item>, etc
4. Angular é compatível e DEVE ser escrito utilizando TypeScript. Por isso tipificamos as variáveis.
    4.1. Uma coisa que é permitido em TS é criar nossos próprios tipos, como se fosse uma classe, ou DTO no java. Para isso precisamos criar o tipo
         dentro de src/models/
         Ex.: 
         export class Todo {
                id: number;
                title: string;
                completed: boolean;
            }
5. O Angular trabalha fortemente com exportações e importações e é assim que temos acesso a dados, tipos, etc de outros módulos
6. DIRETIVAS: As diretivas são marcadores em um elemento DOM (como um atributo) que informam ao Angular para anexar um comportamento 
   especificado a um elemento existente.
   Algumas diretivas podem mudar completamente a estrutura da saída do template do componente. Essas diretivas podem alterar o 
   layout do DOM adicionando e removendo elementos DOM de visualização.
    6.1. Podemos classificar essas diretivas em estruturais. 
        Usadas com *
        *NgIf
        *NgFor
        *NgSwitch, NgSwitchWhen, NgSwitchDefault
    6.2. Outras diretivas podem simplesmente alterar a aparência dos itens gerados pelo modelo. 
         Vamos chamar essas diretivas de atributo:
        Usadas dentro de []
        [NgClass]
        [NgStyle]
        [NgControlName]
        [NgModel]
    6.3. https://angular.io/guide/built-in-directives
        The different types of Angular directives are as follows:
        Components—directives with a template. This type of directive is the most common directive type.
        Attribute directives—directives that change the appearance or behavior of an element, component, or another directive.
        Structural directives—directives that change the DOM layout by adding and removing DOM elements.
7. EVENTOS: Os eventos permitem que você "escute e responda" a ações do usuário feitas através do mouse e do teclado. A sintaxe do evento
   Deve ser (), ex.: (click), (change), (input), etc. Capturando este evento, posso chamar meus métodos e/ou alterar uma propriedade da tag
   sem usar a diretiva de atributo
8. SERVICES: Neste exemplo eu criei um service para recuperar os dados de uma "API". O service foi injetado dentro do construtor do meu componente
   e assim no meu compomente eu consigo chamar o service (que foi importado e injetado), e executar os métodos que ele possua para recuperar os dados
   que eu quero e carregá-los no meu ngOnInit() e por fim no meu HTML.
    8.1. Criando um service: ng g s service/Todo
    8.2. A importação do Injectable permite injetar o service dentro de um construtor de um componente
9. Para que possamos usar um backend, consultar uma API, é necessário fazer uma importação no módulo app.module.ts (este é o módulo onde as importações mais abrangentes são feitas)
    9.1. import { HttpClientModule } from '@angular/common/http' e associar nos imports
    9.2. Uma vez feito esta importação no app.module.ts, eu preciso importá-lo no todo.service.ts
        9.2.1. import { HttpClient, HttpHeaders } from '@angular/common/http'
        9.2.2. E depois injetá-lo no construtor constructor(private http:HttpClient) { }
10. Quando utilizamos um service, para consumir uma API que retorna um Observable, precisamos SEMPRE lembrar que estamos utilizando o conceito de Promises
    Desta forma, os componentes que usam o service e chamam este método precisam subescrever para poder usá-lo. 
    Ou seja, estou me subescrevendo no observador (igual o exemplo do aniversário surpresa)
    10.1. Fazendo um GET
        10.1.1. Criar um SERVICE
        10.1.2. Importar:
                import { Injectable } from '@angular/core'
                import { HttpClient, HttpHeaders } from '@angular/common/http' // Para fazer esta importação, antes eu preciso fazer a importação do import { HttpClientModule } from '@angular/common/http' e associar nos imports no app.module.ts
                import { Observable } from 'rxjs'
        10.1.3. Injetar o Httpclient no construtor: constructor(private http:HttpClient) { }
        10.1.4. Criar o método desejado no SERVICE
                Ex.: SERVICE
                    getTodos():Observable<Todo[]> {
                        return this.http.get<Todo[]>(this.todosUrl);
                    }
        10.1.5. Criar o método desejado no COMPONENT
                Ex.: COMPONENT
                    this.todoService.getTodos().subscribe(todos => {
                        this.todos = todos;
                    })
    10.2. Fazendo um PUT
        10.2.1. Criar um SERVICE
        10.2.2. Importar:
                import { Injectable } from '@angular/core'
                import { HttpClient, HttpHeaders } from '@angular/common/http' // Para fazer esta importação, antes eu preciso fazer a importação do import { HttpClientModule } from '@angular/common/http' e associar nos imports no app.module.ts
                import { Observable } from 'rxjs'
        10.2.3. Criar uma propriedade para passar como Header
                Ex.: 
                const httpOptions =  {
                        headers: new HttpHeaders({
                            'Content-Type': 'application/json'
                        })
                    }
        10.2.4. Injetar o Httpclient no construtor: constructor(private http:HttpClient) { }
        10.2.4. Criar o método desejado no SERVICE
                Ex.: SERVICE
                toggleCompleted(todo: Todo):Observable<any> {
                    const url = `${this.todosUrl}/${todo.id}`; // montando a URL e passando o ID p/ poder fazer o put (update)
                    return this.http.put(url, todo, httpOptions); // httpOptions é para incluir o Header do ContentType
                }
        10.2.5. Criar o método desejado no COMPONENT
                Ex.: COMPONENT
                      this.todoService.toggleCompleted(todo).subscribe(todo => {
                        console.log(todo);
                    })
11. Como está funcionando a deleção...
    Em todo-item
        Ao clicar no botão da tela (evento: (click)), é chamado o método onDelete(todo), passando o objeto todo
        Este método encontra-se na todo-item.component.ts
        Este método precisa "conversar" o Parent (pai) e para isso o que fazemos é um Output do evento personalizado de tipo Todo
        Ou seja, criamos um evento deleteTodo e através das importações de Output e EventEmitter conseguimos enviar para o todo
    Em todo
        Dentro da tag app-todo-item, criamos um evento(deleteTodo), chamando um método criado na todos.component.ts. 
        O método recebe a captura do evento, através de $event e executa o método.    
12. Quando usamos [()] estamos transormando em uma two way data bind
    Ex.: [(ngModel)]
    12.1. Para poder utilizar o [(ngModel)]="title" é necessário fazer a importação abaixo em app.module.ts 
          import { FormsModule } from '@angular/forms';
          E adicionar aos imports
13. Como o add-todo está funcionando.
    13.1. Dentro do componente (add-todo.component.ts), foi criado uma propriedade dentro da classe: title:string;
    13.2. Como eu quero criar um campo de texto e um botão de submit na tela, então eu alterei o add-todo.component.html e adicionei 
          as tags necessárias p/ criar um input e um submit, conforme abaixo.
            Ex.:
            <form class="form">
                <input type="text" name="title" [(ngModel)]="title" placeholder="Add Todo...">
                <input type="submit" value="Submit" class="btn">
            </form>
        13.2.1. A sacada aqui é o uso da diretiva de atributo ngModel, como uma TWO WAY DATA BIND, através da sintaxe:[(ngModel)]="title"
            13.2.1.1. Estas sintaxe permite que o dado digitado sejá atualizado automaticamente com a propriedade criada e exportada title
        13.2.2. Para poder usar a tag <form> eu precisei fazer uma importação import { FormsModule } from '@angular/forms' no app.module.ts
                e adicionar aos imports
    13.3. Neste caso, como eu quero usar o componente em outro componente (em todos), eu preciso fazer o @Output desta propriedade
        13.3.1. Para isso eu fiz as importações: EventEmitter, Output de '@angular/core';
        13.3.2. Criei o output para o evento @Output() addTodo: EventEmitter<any> = new EventEmitter();
        13.3.3. Criei o método onSubmit() que irá popular o objeto Todo e chamar o envio do evento. Repare que estou usando a propriedade title,
                que foi setada pela diretiva [(ngModel)]
            Ex.: 
            onSubmit() {
                const todo = {
                title: this.title,
                completed: false                        
                }
                this.addTodo.emit(todo);
            }
        13.3.4. E adicionei a tag form, o evento (ngSubmit): <form class="form" (ngSubmit)="onSubmit()">
                Ou seja, ao clicar no botão submit, o método onSubmit é chamado e um evento é enviado. O ngSubmit é similar ao Event.preventDefault() do JS
        13.3.5. No componente onde eu quero colocar a tag, eu adiciono ao html a tag: <app-add-todo (addTodo)="addTodo($event)"></app-add-todo>
            13.3.5.1. Ou seja, o evento que veio do add-todo, é capturado pela tag, atráves do (addTodo) e chama o método addTodo() passando o objeto recebido
            13.3.5.2. Dentro do component.ts deste componente (todos.component.ts) eu crio o método addTodo(). Este método, neste caso, irá depender
                      de um service, pois consumirá uma API e consequentemente terá um subscribe.
        13.3.6. Por fim, no service, criar o método que fará o http.post.
                Ex.:
                addTodo(todo:Todo):Observable<Todo> {
                    return this.http.post<Todo>(this.todosUrl, todo, httpOptions);
                }
14. Roteamento. O roteamento é definido no componente app-routing.module.ts
    14.1. Dentro do arquivo de roteamento, fazer a importação e definir as rotas conforme abaixo:
        Ex.:
        // Importando os componentes que eu quero rotear
        import { TodosComponent } from './components/todos/todos.component';
        import { AboutComponent } from './components/pages/about/about.component';
        // Adicionando componentes as rotas
        const routes: Routes = [
        {path: '', component: TodosComponent},
        {path: 'about', component: AboutComponent} // Quando coloco o path, significa que vai adicionar o /nomeDadoAoPath ao meu site
        ];
    14.2. Em seguida, para que o roteamento funcione, eu preciso adicionar a tag de roteamento ao arquivo app.component.html
        Ex.:
        <router-outlet></router-outlet>
    14.3. Por fim, nas páginas onde eu desejo o roteamento, fazer a chamada da tag <a routerLink> conforme exemplo.
        Ex.:
        <nav>
            <a routerLink="/">Home</a> | <a routerLink="/about">About</a>
        </nav>